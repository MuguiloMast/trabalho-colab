# -*- coding: utf-8 -*-
"""trabalho 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ORn1ACTTFsH2OEigw8LrnmytykE22OrQ
"""

!pip install supabase

response = supabase.table("bento_alunos").select("*").execute()

print(response)

from supabase import create_client, Client
supabase: Client = create_client('https://uokrsysjxkecgxurljtt.supabase.co','eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVva3JzeXNqeGtlY2d4dXJsanR0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjM4MTMzOTgsImV4cCI6MjAzOTM4OTM5OH0.VJr5FmblB-MRY9HVbQjKykBNQM9Jr3yq_M8pCxHnLVs')

def backup(usuariosCadastrados) :
  response = supabase.table("bento_alunos").select("*").execute().data

  for i in range(len(response)) :
    usuariosCadastrados.append({
      'id' : response[i]['id'],
      #'email' : response[i]['email'],
      'name' : response[i]['name'],
      'user_name' : response[i]['user_name'],
      'password' : response[i]['password']
        })

usuariosCadastrados = []
backup(usuariosCadastrados)

import re

def verificarEmail (email) :
  validacao = r'\b[A-Za-z0-9.%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,7}\b'
    # verifica se no texto digitado tem: caracteres de A a Z em maiúsculo ou minúsculo"[A-Za-z"
    # números, ponto, underLine,porcentagem e sinais de + e - "0-9.%+-]"
    # depois, verifica se tem um @ e o que vem depois "+@[A-Za-z0-9.-]"
    # por fim, vê o domínio do email ".[A-Z|a-z]"  | = 'ou', e ainda verifica se o domínio tem mais de 7 caracteres, ou menos de 2 "{2,7}"

  if(re.fullmatch(validacao, email)):
    # o re.fullmatch, como o nome sugere, faz essa verificação, letra por letra
    # e leva 2 parâmetros, (validação - o que vai verificar , email - onde vai verificar (separados por , - obviamente))

    return True
  else:
    return False

print((response.data[0]['user_name']))

def backup() :
  response = supabase.table("bento_alunos").select("*").execute()
  response = response.data

  for i in range(len(response)) :
    response.append({
      'name' : response[i]['name'],
      'id' : response[i]['id'],
      'user_name' : response[i]['user_name'],
      'password' : response[i]['password']
        })

    print(response[i])


backup()

def listarUsuariosCadastrados(usuariosCadastrados) :
  response = supabase.table("bento_alunos").select("*").execute().data

  for i in range(len(response)) :
    usuariosCadastrados.append({
      'name' : response[i]['name'],
      'id' : response[i]['id'],
      'user_name' : response[i]['user_name'],
      'password' : response[i]['password']
        })

    print(usuariosCadastrados[i])


usuariosCadastrados = []
listarUsuariosCadastrados(usuariosCadastrados)

def login(identificador) :
  try :
    user_name = input('Digite seu user name: ')
    password = input('Digite sua senha: ')

    response = supabase.table("bento_alunos").select("*").eq("user_name" , user_name ).eq("password" , password).execute().data

    print(response[0]['email'] , " -- " , response[0]['user_name'] , " -- Logado com sucesso")



    identificador = response[0]['id']

    return identificador

  except:
    print('Usuário Não Cadastrado, ou senha incorreta.')
    login()

import uuid

def cadastrar() :
  try :

    usuariosCadastrados = []
    listarUsuariosCadastrados(usuariosCadastrados)

    id = str(uuid.uuid4())
    email = input('Digite seu email: ')
    if verificarEmail(email) != True :
      print('Email inválido, tente novamente.')
      cadastrar()
    for i in usuariosCadastrados :
      if i['email'] ==  email or i['user_name'] ==  user_name :
        print('Email ou nome de usuário já cadastrado , tente outro.')
        cadastrar()


    name = input('Digite seu nome completo: ')

    user_name = input('Digite seu user_name: ')

    password = input('Digite sua senha: ')

    if len(password) <= 6 :
      print('A senha deve conter no mínimo 6 caracteres')
    elif len(password) > 16 :
      print('A senha não pode ter mais que 16 caracteres')


    supabase.table("bento_alunos").insert({"id": id , "email" : email ,"name": name , "user_name":user_name , "password" :password }).execute()

    print('Usuário cadastrado com sucesso!')


  except:
    print('Houve um erro\nTente novamente mais tarde')
    cadastrar()

def mostrarPosts () :
  usuariosCadastrados = []
  listarUsuariosCadastrados(usuariosCadastrados)
  todosPosts = supabase.table("aluno_posts").select("*").execute().data

  for i in range (len(todosPosts)) :
    for y in range (len(usuariosCadastrados)) :
      id = usuariosCadastrados[y]['id']

      postId = todosPosts[i]['id']

      if todosPosts[i]['bento_aluno_id'] == id :
        post = supabase.table("aluno_posts").select("*").eq("bento_aluno_id" , id).eq("id" , postId).execute().data[0]['content']
        user = supabase.table("bento_alunos").select("*").eq("id" , id).execute().data[0]['user_name']

    print(user, " :" , post)

def menu () :
  try:
    print('1: Login')
    print('2: Cadastrar')
    print('3: Sair')
    print('4: Postar algo novo (Login necessário)')
    print('5: Ver postagens')

    opcao = int(input('Escolha uma opção: '))
    return opcao
  except :
    print('Opção inválida')
    menu()

import datetime
import uuid


def criarPost() :
  try :
    usuariosCadastrados = []
    listarUsuariosCadastrados(usuariosCadastrados)

    id = str(uuid.uuid4())

    posted_at = datetime.now().strftime("%m/%d/%Y, %H:%M:%S")

    aluno_id = ''

    aluno_id = login(aluno_id)


    for i in range(len(usuariosCadastrados)) :
      if aluno_id == usuariosCadastrados[i]['id'] :
        break

    content = input('Digite o texto de seu post: ')
    print(id)
    supabase.table("aluno_posts").insert({"id":id , "bento_aluno_id" : aluno_id ,"content": content , "posted_at":posted_at }).execute()


  except:
    print('Houve um erro\nTente novamente mais tarde')
    criarPost()

import os
from IPython.display import clear_output

def clear():

    os.system('cls' if os.name == 'nt' else 'clear')


try :
  id = ''
  def run () :
    while True:
      match menu():
        case 1 :
          login(id)
          print('Logado com sucesso!')
          break
          clear_output()
          run()
        case 2:
          print('Cadastrando...')
          cadastrar()
          break
          clear_output()
          run()

        case 3:
          print('Saindo... Espero ve-lo em breve!')
          break
          clear_output()
          run()

        case 4:
          criarPost()
          break
          clear_output()
          run()
        case 5:
          mostrarPosts()
          break
          clear_output()
          run()

        case _:
          print('Opção inválida')
          continue
          clear_output()





except:
  print('Tente novamente')




# usuário teste : murilo (user name) murilão (name) 12345678 (password)

run()

